@page "/"
@using CreatureSimulator
@inject IJSRuntime JS

<PageTitle>Creature Combat Simulator</PageTitle>

<h2>Creature Combat Simulator</h2>
<div class="alert alert-primary" role="alert">
  Team 1 always goes first, as a result they have a slight advantage in combat simulation
</div>
<div class="alert alert-secondary" role="alert">
    If your string is empty or misses details, the defaults will be used: STATS:+0 / Hearts: 1. NW0. Armor: 8.
</div>
<p>
Paste in a list of TWRPG compatible creatures separated by new lines, once creatures are added to both teams simulation options will appear. Some examples include:
</p>
<div>
    <ul>
        <li>STATS:+2 / DEX:+1 Hearts: 2. Damage: TH+1. Armor: 9.</li>
        <li>STATS:0 / STR:+1, INT+2 Hearts: 1. Damage: NW+5. Armor: 7.</li>
    </ul>
</div>

<section>
    <textarea @bind="creatureTWRPG" rows="5" cols="40"></textarea>

    <div>
        <button class="btn btn-primary" @onclick="AddTeam1">Add To Team1</button>
        <button class="btn btn-primary" @onclick="AddTeam2">Add To Team2</button>
    </div>
</section>

<section style="margin:10px;">
    <div class="row">
        <div class="col-md">
            <h3>
                Team 1
            </h3>

            <ul>
                @foreach (var item in team1)
                {

                    <li>
                        @item.name
                        <span>:</span> @item.creatureStats <button @onclick="()=>Remove(1,team1.IndexOf(item))">x</button>
                    </li>

                }
            </ul>
        </div>

        <div class="col-sm">
            <h3>
                Team 2
            </h3>

            <ul>
                @foreach (var item in team2)
                {
                    <li>
                        @item.name
                        <span>:</span> @item.creatureStats <button @onclick="()=>Remove(2,team2.IndexOf(item))">x</button>
                    </li>
                }
            </ul>
        </div>
    </div>
</section>

<div hidden="@(HideLabel)">
    <button class="btn btn-primary" @onclick="SimulateCombat">Simulate Combat</button>
    <button class="btn btn-primary" @onclick="EstimateRatio">Win/Loss Ratio</button>
    <button class="btn btn-grey" @onclick="Reset">Reset</button>
</div>

<div>
    <p>
        @foreach (var item in logging)
        {
            <br />
            @item
        }

    </p>
</div>
@code {
    private int currentCount = 0;
    private CreatureStats selectedCreature = null;
    private int numOfGroups = 3;
    private int iterations = 5000;

    private List<CreatureStats> team1 = new List<CreatureStats>();
    private List<CreatureStats> team2 = new List<CreatureStats>();

    private bool HideLabel = true;
    private string _creatureTWRPG = "";

    private List<string> logging = new List<string>();

    private string creatureTWRPG
    {
        get
        {
            return _creatureTWRPG;
        }
        set
        {
            _creatureTWRPG = value;
        }
    }

    private async Task AddTeam1()
    {
        await AddToTeam(team1);
    }

    private async Task AddTeam2()
    {
        await AddToTeam(team2);
    }

    private async Task AddToTeam(List<CreatureStats> team)
    {
        var creatureSplit = creatureTWRPG.Split('\n');
        foreach (var creatureText in creatureSplit)
        {
            CreatureStats creature = await JS.InvokeAsync<CreatureStats>("convertCreature", creatureTWRPG, false);
            creature.name = $"Creature#{Dice.Random(1000) + 1}";
            team.Add(creature);
        }

        CheckHiddenButtons();
        _creatureTWRPG = "";
    }

    private void SimulateCombat()
    {
        var team1Creatures = team1.Select(x => new Creature(x, numOfGroups)).ToList();
        var team2Creatures = team2.Select(x => new Creature(x, numOfGroups)).ToList();
        (int result, var logs) = Simulator.Run(numOfGroups, team1Creatures, team2Creatures);
        this.logging = logs;
    }

    private void EstimateRatio()
    {
        var team1Creatures = team1.Select(x => new Creature(x, numOfGroups)).ToList();
        var team2Creatures = team2.Select(x => new Creature(x, numOfGroups)).ToList();
        this.logging = Simulator.RunStatistics(iterations, numOfGroups, team1Creatures, team2Creatures);
    }

    private void Reset()
    {
        _creatureTWRPG = "";
        team1 = new List<CreatureStats>();
        team2 = new List<CreatureStats>();
        CheckHiddenButtons();
    }

    private void Remove(int team, int i)
    {
        if (team == 1) team1 = team1.Where((x, idx) => idx != i).ToList();
        else if (team == 2) team2 = team2.Where((x, idx) => idx != i).ToList();
        CheckHiddenButtons();
    }

    private void CheckHiddenButtons()
    {
        HideLabel = !(team1.Count > 0 && team2.Count > 0);
        this.logging = new List<string>();
    }

}
