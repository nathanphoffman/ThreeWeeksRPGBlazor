@page "/counter"
@using CreatureSimulator
@inject IJSRuntime JS

<PageTitle>Counter</PageTitle>

<h1>Creature Combat</h1>

Paste in 5e creature stats using various notation, ex: "Intelligence: 14, STR: 10, AC 14" Converted result, stats not found will be set to default values
<br/>
<textarea id="texta" @bind="creature5e"></textarea>

<p>
    @if(selectedCreature != null){
        @selectedCreature.creatureStats
    }
</p>

<h3>Optionally Add to Simulator:</h3>
<div>
<button hidden="@(!HideLabel)"class="btn btn-primary" @onclick="AddTeam1">Add To Team1</button>
<button hidden="@(!HideLabel)"class="btn btn-primary" @onclick="AddTeam2">Add To Team2</button>
</div>
<div style="float:left;width:40%">
<h3>
    Team 1
</h3>

<p>
    @foreach (var item in team1)
    {
        <br/>
        @item.creatureStats
    }

</p>
</div>

<div style="float:left;width: 40%">
<h3>
    Team 2
</h3>


<p>
    @foreach (var item in team2)
    {
        <br/>
        @item.creatureStats
    }

</p>
</div>

<div>
<button hidden="@(!HideLabel)"class="btn btn-primary" @onclick="SimulateCombat">Simulate One Combat</button>
<!--<button hidden="@(!HideLabel)"class="btn btn-primary" @onclick="AddTeam2">Estimate Win / Loss Ratio</button>-->
</div>


@code {
    private int currentCount = 0;
    private CreatureStats selectedCreature = null;

    private List<CreatureStats> team1 = new List<CreatureStats>();
    private List<CreatureStats> team2 = new List<CreatureStats>();

    private bool HideLabel = false;
    private string _creature5e = "";
    private string creature5e { 
        get { return _creature5e; } 
        set {
            _creature5e = value;
            ConvertCreature(value); 
        }
    }

    private void AddTeam1()
    {
        if (selectedCreature == null) return;
        team1.Add(selectedCreature);
        selectedCreature = null;
        _creature5e = "";
    }

    private void AddTeam2()
    {
        if (selectedCreature == null) return;
        team2.Add(selectedCreature);
        selectedCreature = null;
        _creature5e = "";
    }

    private async Task ConvertCreature(string val)
    {
        HideLabel = true;
        CreatureStats creature = await JS.InvokeAsync<CreatureStats>("convertCreature", val, true);
        selectedCreature = creature;
        StateHasChanged();
    }

    public class CreatureStats {
        public string creatureStats { get; set; }
        public int strength { get; set; }
        public int intelligence { get; set; }
        public int dexterity { get; set; }
        public int charisma { get; set; }
        public int hearts { get; set; }
        public int armor { get; set; }
        public string type { get; set; }
        public int damage { get; set; }
    }

    private void SimulateCombat()
    {
        var team1Creatures = team1.Select(x => new Creature(x));
        var team2Creatures = team2.Select(x => new Creature(x));
    }
}
